#binary search code---->

int firstOcc(inr arr[] , int n , int k)
{
    int start = 0;
    int end = n-1;
    int mid = s + (e-s)/2;
    int ans = -1;
    
    while(s <= e )
   {
      if(arr[mid] == k){
         ans = mid;
         e = mid - 1;
      }
      else if(k >  arr[mid]){
           s = mid + 1;
       }
       else{
           e = mid - 1;
      }
      mid = s + (e-s)/2;
  }
return ans;
}  

int lastOcc(inr arr[] , int n , int k)
{
    int start = 0;
    int end = n-1;
    int mid = s + (e-s)/2;
    int ans = -1;
    
    while(s <= e )
   {
      if(arr[mid] == k){
         ans = mid;
         s = mid + 1;
      }
      else if(k >  arr[mid]){
           s = mid + 1;
       }
       else{
           e = mid - 1;
      }
      mid = s + (e-s)/2;
  }
return ans;
}  
====================================================================================================================
// Count Set bits code
 int countSetBits(int num) {
        bitset<32> binary(num);  // Assuming integers are 32-bit
        return binary.count();
    }

int sumIndicesWithKSetBits(vector<int>& nums, int k) {
         int sum = 0;

        for (int i = 0; i < nums.size(); i++) {
            if (countSetBits(i) == k) {
                sum += nums[i];
            }
        }

        return sum;
    }
};
========================================================================================================================