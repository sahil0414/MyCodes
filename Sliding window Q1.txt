SLIDING WINDOW------------->
===============
Q1).Maximum of all sub-arrays of size k with given window size.

sol).Brute force approach---->
 #include <vector>

class Solution {
public:
    std::vector<int> maxInSubarrays(const std::vector<int>& arr, int N, int K) {
        std::vector<int> maxValues;
        for (int i = 0; i <= N - K; ++i) {
            int currentMax = arr[i];
            for (int j = 1; j < K; ++j) {
                if (arr[i + j] > currentMax) {
                    currentMax = arr[i + j];
                }
            }
            maxValues.push_back(currentMax);
        }
        return maxValues;
    }
};
=================================================================================================
 Optimized Solution---------------->

#include <vector>
#include <deque>

class Solution {
public:
    std::vector<int> maxInSubarrays(const std::vector<int>& arr, int N, int K) {
        std::vector<int> maxValues;
        std::deque<int> window;

        // Process first window
        for (int i = 0; i < K; ++i) {
            while (!window.empty() && arr[i] >= arr[window.back()])
                window.pop_back();
            window.push_back(i);
        }
        maxValues.push_back(arr[window.front()]);

        // Process remaining windows
        for (int i = K; i < N; ++i) {
            // Remove elements outside the current window
            while (!window.empty() && window.front() <= i - K)
                window.pop_front();
            
            // Remove smaller elements from the back
            while (!window.empty() && arr[i] >= arr[window.back()])
                window.pop_back();
            
            window.push_back(i);
            maxValues.push_back(arr[window.front()]);
        }

        return maxValues;
    }
};
